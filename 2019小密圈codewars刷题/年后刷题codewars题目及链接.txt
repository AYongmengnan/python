*****day1*****:

1.有序字符数
https://www.codewars.com/kata/ordered-count-of-characters/train/python

计算每个字符的出现次数，并按照出现的顺序将其作为元组列表返回。
例如给你一个字符串"abracadabra"，统计里面的字符按照下面的格式输出:

ordered_count("abracadabra") == [('a', 5), ('b', 2), ('r', 2), ('c', 1), ('d', 1)]

2.缩写双字名称
https://www.codewars.com/kata/abbreviate-a-two-word-name/train/python

编写一个函数将名称转换为首字母。这个kata严格地用两个词，它们之间有一个空格。
输出应该是两个大写字母，并用点分隔它们。
它应该如下所示：

    Sam Harris` =&gt; `S.H
    Patrick Feeney` =&gt; `P.F



*****day2*****:

1.求表达式中正数的和
https://www.codewars.com/kata/sum-of-positive

你得到一组数字，返回所有正数的总和。

示例[1,-4,7,12]=&gt;1 + 7 + 12 = 20

注意：如果没有要求的总和，则默认值为0。

2.拼接字符
https://www.codewars.com/kata/mumbling

根据下面的表达式设计一个函数:

accum("abcd") -&gt; "A-Bb-Ccc-Dddd"
accum("RqaEzty") -&gt; "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"



*****day3*****:

1.判断奇数还是偶数
https://www.codewars.com/kata/even-or-odd/train/python

创建一个函数，它以整数作为参数，对偶数返回“偶数”，对奇数返回“奇数”。

2.检查信用卡
https://www.codewars.com/kata/credit-card-issuer-checking

给定一个信用卡号码，我们可以通过一些基本知识来确定发行人/供应商是谁。

完成get_issuer()将使用下面显示的值的功能来确定给定卡号的发卡机构。如果数字不匹配，则该函数应返回该字符串Unknown。

  Card Type     Begins With             Number Length
  AMEX          34 or 37                15           
  Discover      6011                    16           
  Mastercard    51, 52, 53, 54 or 55    16           
  VISA          4                       13 or 16



*****day4*****:

1.未使用的最小的ID
https://www.codewars.com/kata/smallest-unused-id/train/python

你需要管理大量数据，使用零基础和非负ID来使每个数据项都是唯一的！
因此，需要一个方法来计算下一个新数据项返回最小的未使用ID...
注意：给定的已使用ID数组可能未排序。出于测试原因，可能存在重复的ID，但你无需查找或删除它们！
测试用例：
Test.assert_equals(next_id([0,1,2,3,4,5,6,7,8,9,10]), 11)

2.获得中间字符
https://www.codewars.com/kata/get-the-middle-character

你会得到一个字符串,你需要写一个函数返回单词的中间字符。如果单词的长度为奇数，则返回中间字符。如果单词的长度是偶数，则返回中间2个字符。

例如：
Kata.getMiddle("test") should return "es"
Kata.getMiddle("testing") should return "t"



*****day5*****:

1.统计元音字母
https://www.codewars.com/kata/vowel-count/train/python

给一个字符串，统计里面的元音字母！我们给定的元音列表是:[a, e, i, o, u ] ,输入的字符串只会是小写字母或者含有空格。

测试用例：
test.assert_equals(getCount("abracadabra"), 5)

2.反转字符串
https://www.codewars.com/kata/stop-gninnips-my-sdrow/train/python

编写一个函数，它接受一个或多个单词的字符串，其中里面含五个或更多字母单词必须要反转。传入的字符串只包含字母和空格。仅当存在多个单词时才会包含空格。

比如:
spinWords( "Hey fellow warriors" ) =&gt; returns "Hey wollef sroirraw" 



*****day6*****:

1.找到大写字母
https://www.codewars.com/kata/find-the-capitals-1

写一个函数capitals()给你一串字符串，找到里面的大写字母，并返回它们的index.

比如：
capitals('CodEWaRs')输出为 [0,3,4,6] 

2.递归数字总和
https://www.codewars.com/kata/sum-of-digits-slash-digital-root

写一个函数叫digital_root,给定一个数字，递归遍历数字从个位，十位，百位...以此相加计算总和。则以这种方式继续减少，直到产生一位数字。这仅适用于自然数

比如:
digital_root(942)
=> 9 + 4 + 2
=> 15 ...
=> 1 + 5
=> 6



*****day7*****:

1.来排个序
https://www.codewars.com/kata/your-order-please

你的任务是对给定的字符串进行排序。字符串中的每个单词都包含一个数字。此数字是单词在结果中应具有的位置。

注意：数字可以是1到9.因此1将是第一个单词（不是0）。

如果输入字符串为空，则返回空字符串。输入String中的单词只包含有效的连续数字。

例子:
"is2 Thi1s T4est 3a"  --&gt;  "Thi1s is2 3a T4est"


2.点赞
https://www.codewars.com/kata/who-likes-it/train/python

你可能知道Facebook和其他网页上的“点赞”系统。人们可以“喜欢”博客文章，图片或其他项目。我们想要创建应该在这样的项目旁边显示的文本。

实现一个函数likes :: [String] -&gt; String，它必须包含输入数组，包含喜欢项目的人的名字。它必须返回显示文本，如示例所示：
likes [] // must be "no one likes this"
likes ["Peter"] // must be "Peter likes this"
likes ["Jacob", "Alex"] // must be "Jacob and Alex like this"
likes ["Max", "John", "Mark"] // must be "Max, John and Mark like this"
likes ["Alex", "Jacob", "Mark", "Max"] // must be "Alex, Jacob and 2 others like this"
对于4个或更多名称，数字and 2 others只会增加。



*****day8*****:

1.计算重复字母出现的次数
https://www.codewars.com/kata/counting-duplicates/train/python

编写一个函数，该函数将返回在输入字符串中出现多次(不同的不区分大小写的)字母字符和数字的计数。可以假定输入字符串仅包含字母（大写和小写）和数字。

例如:
"abcde" -&gt; 0 # no characters repeats more than once
"aabbcde" -&gt; 2 # 'a' and 'b'
"aabBcde" -&gt; 2 # 'a' occurs twice and 'b' twice (`b` and `B`)
"indivisibility" -&gt; 1 # 'i' occurs six times
"Indivisibilities" -&gt; 2 # 'i' occurs seven times and 's' occurs twice
"aA11" -&gt; 2 # 'a' and '1'
"ABBA" -&gt; 2 # 'A' and 'B' each occur twice


2.把0挪到队尾
https://www.codewars.com/kata/moving-zeros-to-the-end/train/python

编写一个算法，该算法采用数组并将所有零移动到最后，保留其他元素的顺序。
例如：
move_zeros([false,1,0,1,2,0,1,3,"a"]) # returns[false,1,1,2,1,3,"a",0,0]



*****day9*****:

1.创建一个电话号码
https://www.codewars.com/kata/create-phone-number/train/python

编写一个接受10个整数（0到9之间）数组的函数，它以电话号码的形式返回这些数字的字符串。

例如：

create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # => returns "(123) 456-7890"

2.人性化的可读性时间
https://www.codewars.com/kata/human-readable-time/train/python

编写一个函数，它以非负整数（秒）作为输入，并以人类可读的格式返回时间（HH:MM:SS）

- HH =小时，填充到2位数，范围：00 - 99
- MM =分钟，填充到2位数，范围：00 - 59
- SS =秒，填充到2位数，范围：00 - 59

最长时间永远不会超过359999（99:59:59）



*****day10*****:

1.反转一个数字
https://www.codewars.com/kata/reverse-a-number

给定一个数字，写一个函数来输出其反向数字。（例如，给出123答案是321）
数字应该保留他们的标志; 即反转时负数仍应为负数。
比如:
 123 ->  321
-456 -> -654
1000 ->    1

2.检查ip
https://www.codewars.com/kata/ip-validation

编写一种算法，以十进制格式识别有效的IPv4地址。如果IP由四个八位字节组成，其值在0和之间255，则应视为有效。
该函数的输入保证是单个字符串。
例子：有效输入
1.2.3.4
123.45.67.89

无效输入：
1.2.3
1.2.3.4.5
123.456.78.90
123.045.067.089

请注意，前导零（例如01.02.03.04）被视为无效。
测试用例：
Test.assert_equals(is_valid_IP('12.255.56.1'),     True)
Test.assert_equals(is_valid_IP(''),                False)
Test.assert_equals(is_valid_IP('abc.def.ghi.jkl'), False)
Test.assert_equals(is_valid_IP('123.456.789.0'),   False)
Test.assert_equals(is_valid_IP('12.34.56'),        False)



*****day11*****:

1.用函数计算
https://www.codewars.com/kata/calculating-with-functions/train/python

这次我们想用函数编写计算并得到结果。我们来看看一些例子：

例如：
seven(times(five())); // must return 35
four(plus(nine())); // must return 13
eight(minus(three())); // must return 5
six(dividedBy(two())); // must return 3


2.我应该选择哪个加油站？
https://www.codewars.com/kata/which-gas-station-should-i-pick/train/python

你必须填满你的天然气，有多个加油站，价格和距离不同。有时候开车到更远的加油站会更便宜，因为价格更便宜！ 

- 你的汽车最多可以容纳60升。
- 你需要把你的汽车装满
- 根据加油站的实际价格计算油箱中的当前燃油

记住：你还需要燃料才能开到加油站！回家的路也应该考虑！

测试用例：
Test.describe("Default Tests")
obj = {"Powerfiller":{"price": 2, "distance": 50},
        "Powerfuel": {"price": 1.5, "distance": 75}}
currentFuel = 35
fuelConsumption = 7.5
Test.assert_equals(gas_station(obj, currentFuel, fuelConsumption), "Powerfuel")



*****day12*****:

1.电话目录
https://www.codewars.com/kata/phone-directory/train/python

约翰将他的旧个人电话簿备份为文本文件。在文件中的每一行，他能找到的电话号码（如格式化+X-abc-def-ghij其中X代表一个或两个数字），
与相应的名称&lt;，并&gt;和地址。不幸的是，一切都是混合的，事情并不总是在同一个顺序; 
线条的一部分混杂着非字母数字字符（电话号码和姓名除外）。

John的电话簿行示例：
"/+1-541-754-3010 156 Alphand_St. &lt;J Steeve&gt;\n"
" 133, Green, Rd. &lt;E Kustur&gt; NY-56423 ;+1-541-914-3010!\n"
"&lt;Anastasia&gt; +48-421-674-8974 Via Quirinal Roma\n"

你能帮助约翰做一个程序吗，根据他的电话簿和电话号码的行，返回一个这个数字的字符串：
 "Phone =&gt; num, Name =&gt; name, Address =&gt; adress"

例子：

s = "/+1-541-754-3010 156 Alphand_St. &lt;J Steeve&gt;\n 133, Green, Rd. &lt;E Kustur&gt; NY-56423 ;+1-541-914-3010!\n"

phone(s, "1-541-754-3010") should return "Phone =&gt; 1-541-754-3010, Name =&gt; J Steeve, Address =&gt; 156 Alphand St."